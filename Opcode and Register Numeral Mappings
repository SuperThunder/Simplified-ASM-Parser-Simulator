To not have to be constantly comparing strings, the opcodes and operands are mapped to an integer value as below. 
Any nnnn operand value (memory location or integer value) is stored as is. Register operands are stored as negative nnnns, as there is no case where a negative number would be passed otherwise.
-----------------
OPCODES
-----------------
LD: 1
LDi: 100

SD: 2
SDi: 200

ADD: 3
ADDi: 300

SUB: 4
SUBi: 400

MUL: 5
MULi: 500

DIV: 6
DIVi: 600

JMP: 7
JZ: 8
JNZ: 9
JGZ: 10
JGEZ: 11
JLZ: 12
JLEZ: 13

----------------
OPCODE TYPES
----------------
Opcodes can be grouped into types based on what operands they can have
By opcode name:
Type 1: nnnn, Ri: 	LD, LDi, SDi
Type 2: Ri, Rj: 	LD, SD
Type 3: mmmm, nnnn: 	SDi
Type 4: Ri, nnnn: 	SD, JZ, JNZ, JGZ, JGEZ, JLZ, JLEZ
Type 5: Ri, Rj, Rk: 	ADD, SUB, MUL, DIV
Type 6: Ri, nnnn, Rk: 	ADDi, SUBi, MULi, DIVi
Type 7: nnnn: 		JMP

By opcode value:
Type 1: nnnn, Ri: 	1, 100, 200
Type 2: Ri, Rj: 	1, 2
Type 3: mmmm, nnnn: 	200
Type 4: Ri, nnnn: 	2, 8, 9, 10, 11, 12, 13
Type 5: Ri, Rj, Rk: 	3, 4, 5, 6
Type 6: Ri, nnnn, Rk: 	300, 400, 500, 600
Type 7: nnnn		7

NOTE: For any nnnn for a jump command, the number may not be explicitly declared but given as a [labelname]
ex: JMP endofloop

-----------------
REGISTERS
-----------------
Project specification states 99 registers (what kind of machine is this?)
As 0 is a possible nnnn value, there is no register 0
R1: -1
R2: -2
R3: -3
R4: -4
R5: -5
R6: -6
R7: -7
R8: -8
etc
R99: -99
The value of a 32bit int leaves us with room for about 2 billion more registers

-----------------
INTEGER VALUES
-----------------
An integer value might be used for a Add/Sub/Mul/Div operation, as a code location to jump to, or as a memory location for a LD/SD op.
While the specification only shows values up to 4 digits, there are ambiguities that threaten much bigger numbers. Addition into the millions could be reasonably expected.

