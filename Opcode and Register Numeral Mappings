To not have to be constantly comparing strings, the opcodes and operands are mapped to an integer value as below. 
Any nnnn operand value (memory location or integer value) is stored as is. Register operands are stored as negative nnnns, as there is no case where a negative number would be passed otherwise.
-----------------
OPCODES
-----------------
LD: 1
LDi: 100

SD: 2
SDi: 200

ADD: 3
ADDi: 300

SUB: 4
SUBi: 400

MUL: 5
MULi: 500

DIV: 6
DIVi: 600

JMP: 7
JZ: 8
JNZ: 9
JGZ: 10
JGEZ: 11
JLZ: 12
JLEZ: 13

-----------------
REGISTERS
-----------------
As 0 is a possible nnnn value, there is no register 0
R1: -1
R2: -2
R3: -3
R4: -4
R5: -5
R6: -6
R7: -7
R8: -8
The value of a 32bit int leaves us with room for about 2 billion more registers

-----------------
INTEGER VALUES
-----------------
While values greater than 9999 should not be expected, especially for memory locations, the system should still be able to handle them. Addition into the millions could be reasonably expected.
An integer value might be used for a Add/Sub/Mul/Div operation, as a code location to jump to, or as a memory location to load or store
